{"version":3,"file":"group.min.js","sources":["../../src/actionbar/group.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\r\n//\r\n// Moodle is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n//\r\n// Moodle is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU General Public License for more details.\r\n//\r\n// You should have received a copy of the GNU General Public License\r\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\r\n\r\nimport GroupSearch from 'core_group/comboboxsearch/group';\r\nimport {groupFetch} from 'core_group/comboboxsearch/repository';\r\n\r\n/**\r\n * Allow the user to search for groups in the action bar.\r\n *\r\n * @module    core_course/actionbar/group\r\n * @copyright 2024 Shamim Rezaie <shamim@moodle.com>\r\n * @license   http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\r\n */\r\nexport default class Group extends GroupSearch {\r\n\r\n    baseUrl;\r\n    static extraParams;\r\n\r\n    /**\r\n     * Construct the class.\r\n     * @param {string} baseUrl The base URL for the page.\r\n     */\r\n    constructor(baseUrl) {\r\n        super();\r\n        this.baseUrl = baseUrl;\r\n    }\r\n\r\n    /**\r\n     * Allow the class to be invoked via PHP.\r\n     *\r\n     * @param {string} baseUrl The base URL for the page.\r\n     * @param {Object} extraParams Extra parameters.\r\n     * @returns {Group}\r\n     */\r\n    static init(baseUrl, extraParams) {\r\n        Group.extraParams = extraParams;\r\n        return new Group(baseUrl);\r\n    }\r\n\r\n    /**\r\n     * Build up the link that is dedicated to a particular result.\r\n     *\r\n     * @param {Number} groupID The ID of the group selected.\r\n     * @returns {string}\r\n     */\r\n    selectOneLink(groupID) {\r\n        const url = new URL(this.baseUrl);\r\n        url.searchParams.set('groupsearchvalue', this.getSearchTerm());\r\n        url.searchParams.set('group', groupID);\r\n        for (let param in Group.extraParams.params) {\r\n            if (param === 'group') {\r\n                continue;\r\n            }\r\n            url.searchParams.set(param, Group.extraParams.params[param]);\r\n        }\r\n\r\n        return url.toString();\r\n    }\r\n\r\n    /**\r\n     * Get the data we will be searching against in this component.\r\n     *\r\n     * @returns {Promise<*>}\r\n     */\r\n    async fetchDataset() {\r\n        return await groupFetch(this.courseID, Group?.extraParams?.cmid ?? null).then((r) => r.groups);\r\n    }\r\n}\r\n"],"names":["Group","GroupSearch","constructor","baseUrl","extraParams","selectOneLink","groupID","url","URL","this","searchParams","set","getSearchTerm","param","params","toString","courseID","_Group$extraParams","cmid","then","r","groups"],"mappings":";;;;;;;iJAyBqBA,cAAcC,eAS/BC,YAAYC,6DAEHA,QAAUA,oBAUPA,QAASC,oBACjBJ,MAAMI,YAAcA,YACb,IAAIJ,MAAMG,SASrBE,cAAcC,eACJC,IAAM,IAAIC,IAAIC,KAAKN,SACzBI,IAAIG,aAAaC,IAAI,mBAAoBF,KAAKG,iBAC9CL,IAAIG,aAAaC,IAAI,QAASL,aACzB,IAAIO,SAASb,MAAMI,YAAYU,OAClB,UAAVD,OAGJN,IAAIG,aAAaC,IAAIE,MAAOb,MAAMI,YAAYU,OAAOD,eAGlDN,IAAIQ,0FASE,0BAAWN,KAAKO,uCAAUhB,MAAAA,kCAAAA,MAAOI,iDAAPa,mBAAoBC,4DAAQ,MAAMC,MAAMC,GAAMA,EAAEC,wDApD1ErB"}